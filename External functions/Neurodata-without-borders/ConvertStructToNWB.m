% function ConvertStructToNWB()

% https://neurodatawithoutborders.github.io/matnwb/tutorials/html/intro.html

nwb = NwbFile( ...
    'session_description', 'mouse in open exploration',...
    'identifier', 'Mouse5_Day3', ...
    'session_start_time', datetime(2018, 4, 25, 2, 30, 3), ...
    'general_experimenter', 'My Name', ... % optional
    'general_session_id', 'session_1234', ... % optional
    'general_institution', 'University of My Institution', ... % optional
    'general_related_publications', 'DOI:10.1016/j.neuron.2016.12.011'); % optional

subject = types.core.Subject( ...
    'subject_id', '001', ...
    'age', 'P90D', ...
    'description', 'mouse 5', ...
    'species', 'Mus musculus', ...
    'sex', 'M' ...
);
nwb.general_subject = subject;

% create SpatialSeries object
spatial_series_ts = types.core.SpatialSeries( ...
    'data', [linspace(0,10,100); linspace(0,8,100)], ...
    'reference_frame', '(0,0) is bottom left corner', ...
    'timestamps', linspace(0, 100)/200 ...
);
% create Position object and add SpatialSeries
Position = types.core.Position('SpatialSeries', spatial_series_ts);
% create processing module
behavior_mod = types.core.ProcessingModule( 'description',  'contains behavioral data');
% add the Position object (that holds the SpatialSeries object)
behavior_mod.nwbdatainterface.set('Position', Position);

% create processing module
behavior_mod = types.core.ProcessingModule('description',  'contains behavioral data');
% add the Position object (that holds the SpatialSeries object) to the
% module and name the Position object "Position"
behavior_mod.nwbdatainterface.set('Position', Position);
% add the processing module to the NWBFile object, and name the processing module "behavior"
nwb.processing.set('behavior', behavior_mod);

trials = types.core.TimeIntervals( ...
    'colnames', {'start_time', 'stop_time', 'correct'}, ...
    'description', 'trial data and properties', ...
    'id', types.hdmf_common.ElementIdentifiers('data', 0:2), ...
    'start_time', types.hdmf_common.VectorData( ...
        'data', [0.1, 1.5, 2.5], ...
   	    'description','start time of trial in seconds' ...
    ), ...
    'stop_time', types.hdmf_common.VectorData( ...
        'data', [1.0, 2.0, 3.0], ...
   	    'description','end of each trial in seconds' ...
    ), ...
    'correct', types.hdmf_common.VectorData( ...
        'data', [false, true, false], ...
   	    'description', 'whether the trial was correct') ...
    );
nwb.intervals_trials = trials;

nwbExport(nwb, 'intro_tutorial.nwb');
%%
read_nwbfile = nwbRead('intro_tutorial.nwb');

read_spatial_series = read_nwbfile.processing.get('behavior'). ...
    nwbdatainterface.get('Position').spatialseries.get('SpatialSeries')

read_spatial_series.data
read_spatial_series.data.load
read_spatial_series.data(:, 1:10)

% end